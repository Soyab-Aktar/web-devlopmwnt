================================================================================
COMPLETE GUIDE: SENDING POST REQUESTS FROM CLIENT TO SERVER
================================================================================

STEP 1: CREATE A POST API ENDPOINT ON THE SERVER
--------------------------------------------------------------------------------
Set up an Express route that listens for POST requests at a specific URL path.

Example Code:
app.post('/users', (req, res) => {
  const userData = req.body; // Access the sent data
  // Process the data here
  res.send(userData);
});


STEP 2: ENABLE JSON PARSING MIDDLEWARE ON SERVER
--------------------------------------------------------------------------------
Use express.json() middleware to parse incoming JSON data from the client.

Example Code:
app.use(express.json());

WHY THIS IS NEEDED:
Without this middleware, Express cannot understand JSON data sent in the request 
body, and req.body will be undefined.


STEP 3: SET THE HTTP METHOD TO POST ON CLIENT
--------------------------------------------------------------------------------
In your fetch() function, specify method: "POST" in the options object 
(second parameter).

Example Code:
fetch(url, {
  method: "POST",  // Tells the server we're sending data
  // other options...
})

IMPORTANT: Always spell "method" correctly, not "mathod"


STEP 4: ADD CONTENT-TYPE HEADER
--------------------------------------------------------------------------------
Include headers with "Content-Type": "application/json" to tell the server 
the data format you're sending.

Example Code:
headers: {
  "Content-Type": "application/json"
}

WHY THIS MATTERS:
This header informs the server that the body contains JSON data, enabling 
proper parsing.


STEP 5: CONVERT JAVASCRIPT OBJECT TO JSON STRING
--------------------------------------------------------------------------------
Use JSON.stringify() to convert your JavaScript object into a JSON string 
for the body parameter.

Example Code:
body: JSON.stringify({ name: "John", email: "john@example.com" })

WHY STRINGIFY:
The fetch API requires the body to be a string, not a JavaScript object.


STEP 6: HANDLE THE RESPONSE
--------------------------------------------------------------------------------
Chain .then() methods to process the server's response.

Example Code:
.then((res) => res.json())           // Parse response JSON
.then((data) => console.log(data))   // Use the data
.catch((error) => console.error(error)) // Handle errors


================================================================================
COMPLETE EXAMPLE
================================================================================

CLIENT SIDE (React):
--------------------------------------------------------------------------------
const userData = { name: "Soyab", email: "soyab@example.com" };

fetch("http://localhost:5000/users", {
  method: "POST",
  headers: {
    "Content-Type": "application/json"
  },
  body: JSON.stringify(userData)
})
  .then((res) => res.json())
  .then((data) => console.log("Success:", data))
  .catch((error) => console.error("Error:", error));


SERVER SIDE (Express):
--------------------------------------------------------------------------------
const express = require('express');
const app = express();

app.use(express.json()); // Enable JSON parsing

app.post('/users', (req, res) => {
  const newUser = req.body;
  console.log("Received:", newUser);
  res.json({ message: "User created", user: newUser });
});

app.listen(5000, () => console.log("Server running on port 5000"));


================================================================================
KEY POINTS TO REMEMBER
================================================================================

1. Server must have express.json() middleware before routes
2. Client must set method: "POST" (not "mathod")
3. Client must include Content-Type header as "application/json"
4. Client must stringify the JavaScript object before sending
5. Server accesses data through req.body
6. Always handle errors with .catch() on client side

================================================================================
